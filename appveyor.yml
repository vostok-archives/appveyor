# build worker image (VM template)
image: Visual Studio 2017

# default appveyour version
version: 0.0.0.{build}

environment:
  nuget_packages_folder: $(APPVEYOR_BUILD_FOLDER)\nuget-packages

install:
  - ps: Invoke-WebRequest "https://raw.githubusercontent.com/vostok/appveyor/master/cement-install.ps1" -Out "cement-install.ps1"
  - ps: ./cement-install.ps1
  
before_build:
  - cmd: nuget restore || exit /b 0
  - ps: |
      if ($env:APPVEYOR_REPO_BRANCH -eq "master" -or ($env:APPVEYOR_REPO_TAG_NAME -ne $null -and $env:APPVEYOR_REPO_TAG_NAME.StartsWith("prerelease/"))) {
        $formattedBuildNumber = [convert]::ToInt32($env:APPVEYOR_BUILD_NUMBER, 10).ToString("000000")
        $env:build_version_suffix = "-pre$formattedBuildNumber"
        $env:need_deploy_to_nuget = 'true'
      }
      if ($env:APPVEYOR_REPO_TAG_NAME -ne $null -and $env:APPVEYOR_REPO_TAG_NAME.StartsWith("release/")) {
        $env:build_version_suffix = ""
        $env:need_deploy_to_nuget = 'true'
        $env:need_deploy_to_github = 'true'
      }
      
  - ps: |
      Function UpdateProperty {
        Param ($csproj, $property, $propertyValue)
        $node = $csproj.Project.PropertyGroup.ChildNodes | where {$_.Name -eq $property}
        if ($node -eq $null) {
            $node = $csproj.CreateNode("element", $property, "")
            $csproj.Project.PropertyGroup.AppendChild($node) > $null; 
        }
        $node.InnerText = $propertyValue
      }
      
      Get-ChildItem -Recurse -Filter "*.nuspec" | ForEach-Object {
          $nuspec = [xml](Get-Content $_.FullName)
          $csprojFile = $_.FullName.Replace(".nuspec", ".csproj")
          $csproj = [xml](Get-Content $csprojFile)
          
          UpdateProperty $csproj "isPackable" $false
          UpdateProperty $csproj "version" $nuspec.package.metadata.version + "$env:build_version_suffix"
          UpdateProperty $csproj "authors" $nuspec.package.metadata.authors
          UpdateProperty $csproj "owners" $nuspec.package.metadata.owners
          UpdateProperty $csproj "copyright" $nuspec.package.metadata.copyright
          UpdateProperty $csproj "description" $nuspec.package.metadata.description
          UpdateProperty $csproj "repositoryUrl" ($nuspec.package.metadata.repository.Attributes | where {$_.Name -eq "url"}).Value
          UpdateProperty $csproj "repositoryType" ($nuspec.package.metadata.repository.Attributes | where {$_.Name -eq "type"}).Value
          UpdateProperty $csproj "packageLicenseUrl" $nuspec.package.metadata.licenseUrl
          UpdateProperty $csproj "packageProjectUrl" $nuspec.package.metadata.projectUrl
          UpdateProperty $csproj "packageIconUrl" $nuspec.package.metadata.iconUrl
          UpdateProperty $csproj "packageTags" $nuspec.package.metadata.tags
          UpdateProperty $csproj "packageReleaseNotes" $nuspec.package.metadata.releaseNotes
      
          $csproj.Save($csprojFile);
      }
      
build_script:
  - cmd: cd .. & call %cm% init & cd %appveyor_build_folder%
  - cmd: call %cm% update-deps -v
  - cmd: call %cm% build-deps -v
  - cmd: call %cm% build

after_test:
  - ps: |
      Get-ChildItem -Recurse -Filter "*.nuspec" | ForEach-Object {
        if ("$env:build_version_suffix" -ne "") {
          nuget pack $_.FullName -Suffix "$env:build_version_suffix".TrimStart('-') -OutputDirectory $env:nuget_packages_folder
        } else {
          nuget pack $_.FullName -OutputDirectory $env:nuget_packages_folder
        }
      }

artifacts:
  - path: nuget-packages\*.nupkg

deploy:
  # Deploying to NuGet feed
  - provider: Environment
    name: FullNuget
    artifact: /.*\.nupkg/
    on:
      need_deploy_to_nuget: true

  - provider: Environment
    name: Nuget
    artifact: /.*\.nupkg/
    on:
      need_deploy_to_nuget: true
      
  # Deploy to GitHub Releases
  - provider: Environment
    name: GitHub
    artifact: /.*\.nupkg/
    on:
      need_deploy_to_github: true